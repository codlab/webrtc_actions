// Copyright 2020 Dolby Laboratories and Dolby International AB
// Use of this source code is governed by the MIT license that can be
// found in the dolby/LICENSE file.

#ifndef WEBRTC_DVC_AUDIO_PACKET_HANDLER_H_
#define WEBRTC_DVC_AUDIO_PACKET_HANDLER_H_

#include "dvc/audiobufferqueue.h"
#include "dvc/common.h"
#include "dvc/dvc_conference_factory_env.h"

namespace dolby_voice_client {
namespace webrtc_integration {

class AudioPacketHandler : public DvcConferenceBase::RtpSink {
 public:
  AudioPacketHandler(std::shared_ptr<DvcConferenceBase> conference);
  ~AudioPacketHandler() override;

  void HandleReceivedRtpPacket(const uint8_t* data, size_t len);
  void SetMinimumPlayoutDelay(int delay_ms);

  bool HandleReceivedRtcpPacket(const uint8_t* data, size_t len);
  bool HandleRtcpPacketToSend(const uint8_t* data, size_t len);

  bool GetPacketsToSend(std::vector<AudioBuffer>& packets);
  AudioBufferQueue& packets_to_send();
  void SetMute(bool mute);

  DvcConferenceBase* GetConference() { return conference_.get(); }

  // DvcConferenceBase::RtpSink
  void SendRtp(const char* data, size_t len, int64_t system_time_us) override;

 private:
  bool HandleRtpPacketToSend(const uint8_t* data,
                             size_t len,
                             int64_t systime_us);

  AudioBufferQueue _packets_to_send;  // generated by audio session
  std::shared_ptr<DvcConferenceBase> conference_;
};

}  // namespace webrtc_integration
}  // namespace dolby_voice_client

#endif /* WEBRTC_DVC_AUDIO_PACKET_HANDLER_H_ */

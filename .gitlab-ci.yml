stages:
  - build
  - build-and-deploy

# Define pipeline env variables.
variables:
  GIT_STRATEGY: "fetch"
  GIT_CHECKOUT: "true"

  META_FILE: "package.info"
  ENV_FILE: "build.env"
  WEBRTC_IOS: "/opt/googlesource/webrtc_ios/branch-heads/5195" # fullfil proper revision. E.g. number=5195
  WEBRTC_WIN: "C:\\googlesource\\webrtc\\branch-heads\\<number>"

# Define gitlab runners on local build servers.
.capi_ios_runner_tags:
  tags:
    - wro-osx
    - webrtc
    - ios
  timeout: 3h

.check_if_package_was_built: &check_if_package_was_built
  - export AWS_ACCESS_KEY_ID="${AWS_ACCESS_KEY_ID_PROD}"
  - export AWS_SECRET_ACCESS_KEY="${AWS_SECRET_ACCESS_KEY_PROD}"
  - echo "Checking if package was built is not ready yet..."

.setup_webrtc_repository: &setup_webrtc_repository
  - cd ${CI_PROJECT_DIR} && git clean -ffdx
  - export PATH="${PATH}:/opt/googlesource/depot_tools"
  - if [[ -d ${WEBRTC_IOS} ]]; then echo "Getting fresh repository from local cache ${WEBRTC_IOS}"; else exit 1; fi
  - mkdir ${CI_PROJECT_DIR}/src/ && rsync -aS ${WEBRTC_IOS}/. ${CI_PROJECT_DIR}/src/. && cp ${WEBRTC_IOS}/../../.gclient* ${CI_PROJECT_DIR}/
  - cd ${CI_PROJECT_DIR}/src
  - export GIT_SSH_COMMAND='ssh -i $GIT_SSH_PRIVATE_KEY_PATH'
  - git remote add dolby git@gitlab-sfo.dolby.net:voxeet/cpp/webrtc.git
  - sshpass -p $GIT_SSH_PRIVATE_KEY_PASSPHRASE -P passphrase git fetch --all
  - git checkout ${CI_COMMIT_SHA}
  - cd ${CI_PROJECT_DIR} && time gclient sync -D

# Run code before_script
.before_script_local_build_hosts: &before_script_local_build_hosts
  before_script:
    - *check_if_package_was_built
    - *setup_webrtc_repository

.ios_build:
  stage: build-and-deploy
  extends:
    - .capi_ios_runner_tags
    - .before_script_local_build_hosts

  script:
   - if [[ $CI_JOB_NAME == *"debug"* ]] ; then export EXTRA_ARGS="--build_config debug --extra-gn-args symbol_level=2" ; fi
   - ${CI_PROJECT_DIR}/src/tools_webrtc/ios/build_ios_libs.py ${EXTRA_ARGS}
   - ${CI_PROJECT_DIR}/cicd/create_meta_file.sh
   - source ${CI_PROJECT_DIR}/${ENV_FILE}
   # create zip package
   - pushd ${CI_PROJECT_DIR}
   - find src | grep '\.hpp'$                     > src/out/zip_file_list.txt
   - find src | grep '\.hxx'$                    >> src/out/zip_file_list.txt
   - find src | grep '\.h'$                      >> src/out/zip_file_list.txt
   - find src/out_ios_libs | grep '\.a'$         >> src/out/zip_file_list.txt
   - echo ${META_FILE}                           >> src/out/zip_file_list.txt
   - cat src/out/zip_file_list.txt | zip -yq -1 --names-stdin ${ARTIFACT_ZIP_PACKAGE}
   - popd
   - aws s3 cp --quiet ${ARTIFACT_ZIP_PACKAGE} "${VOX_WEBRTC_S3_ROOT_URL}/ios/snapshots/" || echo "Error uploading ${ARTIFACT_ZIP_PACKAGE} on ${IOS_WEBRTC_S3_PREBUILTS} is done."
   - aws s3 ls "${VOX_WEBRTC_S3_ROOT_URL}/ios/snapshots/"
   - echo -e "Package link \n https://vox-webrtc.s3.amazonaws.com/ios/snapshots/${ARTIFACT_ZIP_PACKAGE}"

iOS_MR_test:
  stage: build
  only: ['merge_requests']
  extends:
    - .capi_ios_runner_tags
    - .before_script_local_build_hosts
  script:
    - time ${CI_PROJECT_DIR}/src/tools_webrtc/ios/build_ios_libs.py

ios_release:
  extends:
    - .ios_build

ios_debug:
  extends:
    - .ios_build

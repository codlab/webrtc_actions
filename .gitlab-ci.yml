stages:
  - build
  - build-and-deploy

# Define pipeline env variables.
variables:
  GIT_STRATEGY: "fetch"
  GIT_CHECKOUT: "true"

  META_FILE: "package.info"
  ENV_FILE: "build.env"
 
  WEBRTC_IOS: "/opt/googlesource/webrtc_ios/branch-heads/5195" # fullfil proper revision. E.g. number=5195
  WEBRTC_ANDROID: "/opt/googlesource/webrtc_android/branch-heads/5195"
  WEBRTC_WIN: "C:\\googlesource\\webrtc\\branch-heads\\<number>"

  VOX_WEBRTC_S3_ROOT_URL: "s3://vox-webrtc"

# Android docker configuration
.android-docker:
  image: 836782323787.dkr.ecr.us-east-1.amazonaws.com/android:android-webrtc-openjdk8u252-1

# Define gitlab runners on local build servers.
.capi_ios_runner_tags:
  tags:
    - wro-osx
    - webrtc
    - ios
  timeout: 3h

.capi_macos_runner_tags:
  tags:
    - wro-osx
    - webrtc
    - mac64
  timeout: 3h

.capi_android_runner_tags:
  tags:
    - ubuntu
    - webrtc

  timeout: 6h

.check_if_package_was_built: &check_if_package_was_built
  - export AWS_ACCESS_KEY_ID="${AWS_ACCESS_KEY_ID_PROD}"
  - export AWS_SECRET_ACCESS_KEY="${AWS_SECRET_ACCESS_KEY_PROD}"
  - ${CI_PROJECT_DIR}/cicd/s3_package_finder.sh || exit 0 # If package exists on S3, finish job.

.setup_webrtc_repository_ios: &setup_webrtc_repository_ios
  - export PATH="${PATH}:/opt/googlesource/depot_tools"
  - if [[ -d ${WEBRTC_CACHE} ]]; then echo "Getting fresh repository from local cache ${WEBRTC_CACHE}"; else exit 1; fi
  - mkdir ${CI_PROJECT_DIR}/src/ && rsync -aS ${WEBRTC_CACHE}/. ${CI_PROJECT_DIR}/src/. && cp ${WEBRTC_CACHE}/../../.gclient* ${CI_PROJECT_DIR}/
  - cd ${CI_PROJECT_DIR}/src
  - git remote add dolby git@gitlab-sfo.dolby.net:voxeet/cpp/webrtc.git
  - sshpass -p $GIT_SSH_PRIVATE_KEY_PASSPHRASE -P passphrase git fetch --all
  - git checkout ${CI_COMMIT_SHA}
  - cd ${CI_PROJECT_DIR} && time gclient sync -D

# Run code before_script
.before_script_local_build_hosts_ios: &before_script_local_build_hosts_ios
  before_script:
    - *check_if_package_was_built
    - *setup_webrtc_repository_ios

.ios_build:
  stage: build-and-deploy
  except:
    refs:
    - merge_requests
  extends:
    - .capi_ios_runner_tags
    - .before_script_local_build_hosts_ios
  variables:
    WEBRTC_CACHE: ${WEBRTC_IOS}

  script:
   - if [[ $CI_JOB_NAME == *"debug"* ]] ; then export EXTRA_ARGS="--build_config debug --extra-gn-args symbol_level=2" ; fi
   - ${CI_PROJECT_DIR}/src/tools_webrtc/ios/build_ios_libs.py ${EXTRA_ARGS}
   - ${CI_PROJECT_DIR}/cicd/create_meta_file.sh
   - source ${CI_PROJECT_DIR}/${ENV_FILE}
   # create zip package
   - pushd ${CI_PROJECT_DIR}
   - find src | grep '\.hpp'$                     > src/out/zip_file_list.txt
   - find src | grep '\.hxx'$                    >> src/out/zip_file_list.txt
   - find src | grep '\.h'$                      >> src/out/zip_file_list.txt
   - find src/out_ios_libs | grep '\.a'$         >> src/out/zip_file_list.txt
   - echo ${META_FILE}                           >> src/out/zip_file_list.txt
   - cat src/out/zip_file_list.txt | zip -yq -1 --names-stdin ${ARTIFACT_ZIP_PACKAGE}
   - popd
   - aws s3 cp --quiet ${ARTIFACT_ZIP_PACKAGE} "${VOX_WEBRTC_S3_ROOT_URL}/ios/snapshots/" || echo "Error uploading ${ARTIFACT_ZIP_PACKAGE} on ${IOS_WEBRTC_S3_PREBUILTS} is done."
   - echo -e "Package link \n https://vox-webrtc.s3.amazonaws.com/ios/snapshots/${ARTIFACT_ZIP_PACKAGE}"

# .macos64_build:
#   stage: build-and-deploy
#   except:
#     refs:
#     - merge_requests
#   extends:
  #   - .capi_macos_runner_tags
  #   - .build_before_script_mac_hw
  # script:
  #   - source ${CI_PROJECT_DIR}/skip_build
  #   - |
  #     if [ $skip_build = "true" ]; then
  #         echo "skipping building - value of skip_build is $skip_build"
  #         exit 0
  #     fi
  #   - bash ${CI_PROJECT_DIR}/cicd/build_webrtc_macos64.sh
  #   - ${CI_PROJECT_DIR}/cicd/create_meta_file.sh
  #   - source ${CI_PROJECT_DIR}/${ENV_FILE}
  #   # create zip package: only headers and static libs are needed for Linux:
  #   - pushd ${CI_PROJECT_DIR}
  #   - find src | grep '\.hpp'$                     > src/out/zip_file_list.txt
  #   - find src | grep '\.hxx'$                    >> src/out/zip_file_list.txt
  #   - find src | grep '\.h'$                      >> src/out/zip_file_list.txt
  #   - find src/out | grep '\.a'$                  >> src/out/zip_file_list.txt
  #   - echo ${META_FILE}                           >> src/out/zip_file_list.txt
  #   - find src/out | grep 'webrtc_licenses.html'$ >> src/out/zip_file_list.txt
  #   - cat src/out/zip_file_list.txt | zip -yq -1 --names-stdin ${ARTIFACT_ZIP_PACKAGE}
  #   - popd
  #   - aws s3 cp --quiet ${ARTIFACT_ZIP_PACKAGE} "${VOX_WEBRTC_S3_ROOT_URL}/macos64/snapshots/" || echo "Error uploading ${ARTIFACT_ZIP_PACKAGE} on ${VOX_WEBRTC_S3_ROOT_URL}/macos64/snapshots/."
  #   - aws s3 ls "${VOX_WEBRTC_S3_ROOT_URL}/macos64/snapshots/"
  #   - echo -e "Package link \n https://vox-webrtc.s3.amazonaws.com/macos64/snapshots/${ARTIFACT_ZIP_PACKAGE}"

iOS_MR_test:
  stage: build
  only: ['merge_requests']
  extends:
    - .capi_ios_runner_tags
    - .before_script_local_build_hosts_ios
  variables:
    WEBRTC_CACHE: ${WEBRTC_IOS}
  script:
    - time ${CI_PROJECT_DIR}/src/tools_webrtc/ios/build_ios_libs.py

ios_release:
  extends:
    - .ios_build

ios_debug:
  extends:
    - .ios_build

# MacOS64_MR_test:
#   stage: build
#   only: ['merge_requests']
#   extends:
#     - .capi_macos_runner_tags
#     - .before_script_local_build_hosts
#   script:
#     - time ${CI_PROJECT_DIR}/src/tools_webrtc/ios/build_ios_libs.py
#
# macos64_release:
#   extends:
#     - .macos64_build
#
# macos64_debug:
#   extends:
#     - .macos64_build

.setup_webrtc_repository_android: &setup_webrtc_repository_android
  - export PATH="${PATH}:/opt/googlesource/depot_tools"
  #- if [[ -d ${WEBRTC_CACHE} ]]; then echo "Getting fresh repository from local cache ${WEBRTC_CACHE}"; else exit 1; fi
  #- mkdir ${CI_PROJECT_DIR}/src/ && rsync -aS ${WEBRTC_CACHE}/. ${CI_PROJECT_DIR}/src/. && cp ${WEBRTC_CACHE}/../../.gclient* ${CI_PROJECT_DIR}/
  #- cd ${CI_PROJECT_DIR}/src
  - cd ${CI_PROJECT_DIR}
  - fetch --nohooks webrtc_android
  - gclient sync -D
  - cd src
  - git checkout -b webrtc_105 refs/remotes/branch-heads/5195
  - git remote add dolby git@gitlab-sfo.dolby.net:voxeet/cpp/webrtc.git
  - git config --global user.name ${GL_SA_NAME}
  - git config --global user.email ${GL_SA_EMAIL}
  - chmod 600 ${GL_SA_SSH_PRIV_KEY}
  - export GIT_SSH_COMMAND="ssh -v -i ${GL_SA_SSH_PRIV_KEY} -o StrictHostKeyChecking=no"
  - mkdir /root/.ssh/
  - ssh-keyscan gitlab-sfo.dolby.net >> ~/.ssh/known_hosts
  - git fetch --all
  - git checkout ${CI_COMMIT_SHA}
  - cd ${CI_PROJECT_DIR} && time gclient sync -D

# Run code before_script
.before_script_local_build_hosts_android: &before_script_local_build_hosts_android
  before_script:
    - *check_if_package_was_built
    - *setup_webrtc_repository_android

.android_build:
  stage: build-and-deploy
  except:
    refs:
    - merge_requests
  extends:
    - .android-docker
    - .capi_android_runner_tags
    - .before_script_local_build_hosts_android
  variables:
    WEBRTC_CACHE: ${WEBRTC_ANDROID}
  script:
    - bash ./patches/android.sh ${CI_PROJECT_DIR}/src
    - bash ${CI_PROJECT_DIR}/cicd/build_android.sh
    - ${CI_PROJECT_DIR}/cicd/create_meta_file.sh
    - source ${CI_PROJECT_DIR}/${ENV_FILE}
    - bash ${CI_PROJECT_DIR}/cicd/build_android_bundle_out.sh
    - aws s3 cp --quiet ${CI_PROJECT_DIR}/${ARTIFACT_ZIP_PACKAGE} "${VOX_WEBRTC_S3_ROOT_URL}/android/snapshots/" --acl "private" --quiet || echo "Error uploading ${ARTIFACT_ZIP_PACKAGE}"
    - aws s3 ls ${VOX_WEBRTC_S3_ROOT_URL}/android/snapshots/
    - echo -e "Package link \n https://vox-webrtc.s3.amazonaws.com/android/snapshots/${ARTIFACT_ZIP_PACKAGE}"
  artifacts:
    paths:
      - artifacts

android_release:
  extends:
    - .android_build

android_debug:
  extends:
    - .android_build


#Android_MR_test:
#  stage: build
#  variables:
#    APK_FLAVOR: "assembleEnv_stagingRelease"
#  only: ['merge_requests']
#  extends:
#    - .capi_android_runner_tags
#    - .before_script_local_build_hosts_android
#  variables:
#    WEBRTC_CACHE: ${WEBRTC_ANDROID}
#  script:
#    # compiling only arm64-v8a for MR purposes...
#    - bash ./patches/android.sh ${CI_PROJECT_DIR}/src
#    - cd ${CI_PROJECT_DIR}/src
#    - gn gen out/arm64-v8a/Release --args="target_os=\"android\" target_cpu=\"arm64\" is_debug=false use_rtti=true"
#    - ninja -C out/arm64-v8a/Release webrtc metrics


